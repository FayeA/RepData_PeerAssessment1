qplot(Wind, Ozone, data=airquality, facets=.~factor(Month))
airquality <- transform(airquality,Month=factor(Month))
?transform
head(airquality)
qplot(Wind, Ozone, data=airquality, facets=.~Month)
?splom
qplot(Wind, Ozone, data=airquality, facets=.~Month) + geom_smooth()
?trellis.par.set
?pane
?panel
?panel.abline
?llines
?text
?panel.text
panel.axis
?panel.axis
?llines
?panel.points
setwd("~/__FAYESFILES/GITHUB/RepData_PeerAssessment1")
get.files()
list.files()
unzip("activity.zip")
list.files()
?read.csv
activityData <- read.csv("activity.csv")
str(activityData)
str(activityData$date)
class(activityData$date)
?histogram
library(lattice)
?histogram
?histogram
histogram(steps
, activityData
)
histogram(activityData$steps
, activityData
)
histogram(activityData$steps ~ activityData$date
, activityData
)
?qplot
library(ggplot2)
?qplot
qplot(date, steps, data=activityData, geom="histogram"
)
with(date, qplot(steps, data=activityData, geom="histogram"
)
)
?histogram
with(activityData$date, qplot(steps, data=activityData, geom="histogram"
)
)
?histogram
histogram(activityData$steps, activityData)
?transform
?plyr
?summarise
?summarise
?plyr
?sapply
testdata <- tapply(activityData$steps, activityData$date, sum, simplify=TRUE)
?mutate
?melt
testdata2 <- tapply(activityData$steps, activityData$date, sum, simplify=FALSE)
unlist(testdata2)
testdata3 <- unlist(testdata2)
?unlist
histogram(testdata2)
?histogram
data.frame(testdata2)
testdata3 <- data.frame(testdata2)
View(testdata3)
histogram(testdata3)
histogram(testdata2, testdata3)
histogram(testdata3$testdata2, testdata3)
testdata4 <- rbind(testdata3$row.names, testdata3)
View(testdata4)
testrownames <- row.names(testdata3)
testdata4 <- rbind(testrownames, testdata3)
View(testdata4)
View(testdata3)
data.frame(testrownames)
testdata4 <- rbind(data.frame(testrownames), testdata3)
testrn <- data.frame(testrownames)
testdata4 <- rbind(testrn, testdata3)
View(testrn)
row.names(testrn) <- testrn$testrownames
testdata4 <- rbind(testrn, testdata3)
View(testrn)
testdata4 <- rbind(testrn, testdata3)
View(testdata3)
View(testrn)
testdata5 <- rbind(testrn, testdata3)
View(testrn)
histogram(testdata3$testdata2, testdata3)
histogram(testdata3$testdata2)
test1 <- summarize(activityData, date=n_distinct(date), totalsteps=sum(steps))
?summarize
test1 <- summarise(activityData, date=n_distinct(date), totalsteps=sum(steps))
library(plyr)
test1 <- summarise(activityData, date=n_distinct(date), totalsteps=sum(steps))
?n_distinct
library(dplyr)
test1 <- summarise(activityData, date=n_distinct(date), totalsteps=sum(steps))
View(test1)
activityByDate <- group_by(activityData, date)
activityByDate <- group_by(activityData, date)
stepsByDate <- summarize(activityByDate,
date = date,
totalsteps = sum(steps))
stepsByDate <- summarize(activityByDate,
date = date,
totalsteps = sum(steps))
stepsByDate <- summarize(activityByDate,
totalsteps = sum(steps))
View(stepsByDate)
histogram(totalsteps, stepsByDate)
histogram(stepsByDate$totalsteps, stepsByDate)
?histogram
?lattice
histogram(y=stepsByDate$totalsteps, x=stepsByDate$date, stepsByDate)
qplot(y=stepsByDate$totalsteps, x=stepsByDate$date, stepsByDate)
qplot(y=stepsByDate$totalsteps, x=stepsByDate$date, stepsByDate, type="histogram")
qplot(y=stepsByDate$totalsteps, x=stepsByDate$date, stepsByDate, geom="histogram")
qplot(x=stepsByDate$totalsteps, stepsByDate, geom="histogram")
qplot(stepsByDate$totalsteps, stepsByDate)
?qplot
qplot(totalsteps, stepsByDate)
?qplot
qplot(totalsteps, data=stepsByDate)
histogram(totalsteps, stepsByDate)
histogram(stepsByDate$totalsteps, stepsByDate)
with(stepsByDate$date, (histogram(stepsByDate$totalsteps, stepsByDate))
)
with(stepsByDate$date, (histogram(stepsByDate$totalsteps, stepsByDate)))
?histogram
?hist
?histogram
?hist
with(stepsByDate$date, (hist(stepsByDate$totalsteps, stepsByDate)))
hist(x=stepsByDate$date, y=stepsByDate$totalsteps)
stepsByDate <- summarize(activityByDate,
totalSteps = sum(steps))
histogram(totalSteps, stepsByDate)
histogram(stepsByDate$totalSteps, stepsByDate)
qplot(stepsByDate$totalSteps, stepsByDate)
?qplot
qplot(stepsByDate$totalSteps, data=stepsByDate)
qplot(stepsByDate$totalSteps, data=stepsByDate, geom="histogram")
qplot(stepsByDate$totalSteps, data=stepsByDate, geom="histogram", colour=date)
qplot(stepsByDate$totalSteps, data=stepsByDate, geom="histogram", colour="blue")
qplot(stepsByDate$totalSteps, data=stepsByDate, geom="histogram", fill="blue")
qplot(stepsByDate$totalSteps, data=stepsByDate, geom="histogram", aes(fill="blue"))
qplot(stepsByDate$totalSteps, data=stepsByDate, geom="histogram")
?ggplot
histogram(stepsByDate$totalSteps, stepsByDate)
qplot(stepsByDate$totalSteps, data=stepsByDate, geom="histogram")
histogram(stepsByDate$totalSteps, stepsByDate)
qplot(stepsByDate$totalSteps, data=stepsByDate)
?histogram
histogram(stepsByDate$totalSteps, stepsByDate, type="count")
histogram(stepsByDate)
histogram(stepsByDate$totalSteps)
histogram(stepsByDate$totalSteps, stepsByDate, type="count")
totalSteps
histogram(stepsByDate$totalSteps)
histogram(stepsByDate$totalSteps, stepsByDate, type="count")
histogram(stepsByDate$totalSteps)
hist(stepsByDate$totalSteps)
meanTotalSteps <- mean(stepsByDate$totalSteps)
?mean
meanTotalSteps <- mean(stepsByDate$totalSteps, na.rm=TRUE)
medianTotalSteps <- median(stepsByDate$totalSteps, na.rm=TRUE)
?ts
?plot
?hist
?plot
View(activityData)
stepsByInterval <- summarize(activityByInterval, meanSteps = mean(steps))
activityByInterval <- group_by(activityData, interval)
stepsByInterval <- summarize(activityByInterval, meanSteps = mean(steps))
View(stepsByInterval)
stepsByInterval <- summarize(activityByInterval, meanSteps = mean(steps, na.rm=TRUE))
View(stepsByInterval)
plot(x=stepsByInterval$interval, y=stepsByInterval$meanSteps)
plot(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, type="l")
plot(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, type="l", label=TRUE)
text(labels=interval)
text(labels=stepsByInterval=interval)
text(labels=stepsByInterval$interval)
text(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, labels=stepsByInterval$interval)
text(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, labels=stepsByInterval$interval, cex=0.7)
plot(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, type="l")
text(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, labels=stepsByInterval$interval, cex=0.7)
plot(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, type="l")
text(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, labels=stepsByInterval$interval, cex=0.5)
plot(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, type="l")
text(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, labels=stepsByInterval$interval, cex=0.7)
View(testdata3)
totalMissingValues <- is.na(activityData)
View(totalMissingValues)
totalMissingValues <- sum(is.na(activityData))
?is.complete
totalMissingValues <- sum(!complete.cases(activityData))
totalIncompleteRows <- sum(!complete.cases(activityData))
activityDataImputed <- activityData
activityData$row.name
?norws
?nrows
?numrows
for(i=1:nrow(activityDataImputed)){
if(steps[i]==NA){
steps[i] <- stepsByInterval[stepsByInterval$interval==activityDataImputed[i,3]]
}
}
for(i=1:nrow(activityDataImputed)){
if(activityDataImputed$steps[i]==NA){
activityDataImputed$steps[i] <- stepsByInterval[stepsByInterval$interval==activityDataImputed[i,3]]
}
}
?for
()
?for
()
for(i in 1:nrow(activityDataImputed)){
if(activityDataImputed$steps[i]==NA){
activityDataImputed$steps[i] <- stepsByInterval[stepsByInterval$interval==activityDataImputed[i,3]]
}
}
for(i in 1:nrow(activityDataImputed)){
if(is.na(activityDataImputed$steps[i]){
activityDataImputed$steps[i] <- stepsByInterval[stepsByInterval$interval==activityDataImputed[i,3]]
}
}
for(i in 1:nrow(activityDataImputed)){
if(is.na(activityDataImputed$steps[i])){
activityDataImputed$steps[i] <- stepsByInterval[stepsByInterval$interval==activityDataImputed[i,3]]
}
}
activityDataImputed[2,3]
?subset
for(i in 1:nrow(activityDataImputed)){
if(is.na(activityDataImputed$steps[i])){
activityDataImputed$steps[i] <- stepsByInterval[subset(stepsByInterval$interval==activityDataImputed$interval),2]
}
}
subset(stepsByInterval$interval==5)
for(i in 1:nrow(activityDataImputed)){
if(is.na(activityDataImputed$steps[i])){
activityDataImputed$steps[i] <- stepsByInterval[subset(stepsByInterval, stepsByInterval$interval==activityDataImputed$interval),2]
}
}
for(i in 1:nrow(activityDataImputed)){
if(is.na(activityDataImputed$steps[i])){
activityDataImputed$steps[i] <- stepsByInterval[stepsByInterval$interval==activityDataImputed$interval,2]
}
}
View(activityDataImputed)
activityDataImputed <- activityData
for(i in 1:nrow(activityDataImputed)){
if(is.na(activityDataImputed$steps[i])){
activityDataImputed$steps[i] <- stepsByInterval[stepsByInterval$interval==activityDataImputed$interval,2]
}
}
View(activityDataImputed)
View(stepsByInterval)
activityDataImputed <- activityData
for(i in 1:nrow(activityDataImputed)){
if(is.na(activityDataImputed$steps[i])){
activityDataImputed$steps[i] <- stepsByInterval[stepsByInterval$interval=activityDataImputed$interval,2]
}
}
activityDataImputed <- activityData
View(activityDataImputed)
for(i in 1:nrow(activityDataImputed)){
if(is.na(activityDataImputed$steps[i])){
activityDataImputed$steps[i] <- stepsByInterval[stepsByInterval$interval=activityDataImputed$interval,2]
}
}
activityDataImputed <- activityData
for(i in 1:nrow(activityDataImputed)){
if(is.na(activityDataImputed$steps[i])){
activityDataImputed$steps[i] <- stepsByInterval[stepsByInterval$interval==activityDataImputed[i,3],2]
}
}
View(activityDataImputed)
## Group the activityDataImputed by date variable
activityByDate_2 <- group_by(activityDataImputed, date)
## Create a dataframe with sum of steps per date
stepsByDate_2<- summarize(activityByDate_2, totalSteps = sum(steps))
## Create the histogram of total number of steps taken each day.
hist(stepsByDate_2$totalSteps)
## Mean of total number of steps taken per day
meanTotalSteps_2 <- mean(stepsByDate_2$totalSteps, na.rm=FALSE)
## Median of total number of steps taken per day
medianTotalSteps_2 <- median(stepsByDate_$totalSteps, na.rm=FALSE)
## Group the activityDataImputed by date variable
activityByDate_2 <- group_by(activityDataImputed, date)
## Create a dataframe with sum of steps per date
stepsByDate_2<- summarize(activityByDate_2, totalSteps = sum(steps))
## Create the histogram of total number of steps taken each day.
hist(stepsByDate_2$totalSteps)
## Mean of total number of steps taken per day
meanTotalSteps_2 <- mean(stepsByDate_2$totalSteps, na.rm=FALSE)
## Median of total number of steps taken per day
medianTotalSteps_2 <- median(stepsByDate_$totalSteps, na.rm=FALSE)
medianTotalSteps_2 <- median(stepsByDate_2$totalSteps, na.rm=FALSE)
##########################################
## Loading and preprocessing the data
##
## Unzip the dataset
unzip("activity.zip")
## Read the data
activityData <- read.csv("activity.csv")
## View structure of the activityData
str(activityData)
## Load the dplyr package
library(dplyr)
#####################################################
## What is mean total number of steps taken per day?
##
## 1.
## Make a histogram of the total number of steps taken each day
## Group the activityData by date variable
activityByDate <- group_by(activityData, date)
## Create a dataframe with sum of steps per date
stepsByDate <- summarize(activityByDate, totalSteps = sum(steps))
## Create the histogram of total number of steps taken each day.
hist(stepsByDate$totalSteps)
## 2.
## Calculate and report the mean and median total number of steps taken per day
## Mean of total number of steps taken per day
meanTotalSteps <- mean(stepsByDate$totalSteps, na.rm=TRUE)
## Median of total number of steps taken per day
medianTotalSteps <- median(stepsByDate$totalSteps, na.rm=TRUE)
#####################################################
## What is the average daily activity pattern?
##
## 1.
## Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
## and the average number of steps taken, averaged across all days (y-axis)
## Group the activityData by interval variable
activityByInterval <- group_by(activityData, interval)
## Create a dataframe with sum of steps per date
stepsByInterval <- summarize(activityByInterval, meanSteps = mean(steps, na.rm=TRUE))
# Create the plot
plot(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, type="l")
## 2.
## Which 5-minute interval, on average across all the days in the dataset,
## contains the maximum number of steps?
## Add labels to all points in the plot using the interval variable.
text(x=stepsByInterval$interval, y=stepsByInterval$meanSteps, labels=stepsByInterval$interval, cex=0.7)
## Interval 835 contains the maximum number of steps.
#####################################################
## Imputing missing values
##
## Note that there are a number of days/intervals where there are missing values (coded as NA).
## The presence of missing days may introduce bias into some calculations or summaries of the data.
## 1.
## Calculate and report the total number of missing values in the dataset
## (i.e. the total number of rows with NAs)
## Calculate total number of rows with missing values.
totalIncompleteRows <- sum(!complete.cases(activityData))
## There are 2304 rows with missing values.
## 2.
## Devise a strategy for filling in all of the missing values in the dataset.
## The strategy does not need to be sophisticated.
## For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
## Impute missing values with the mean of the corresponding 5-minute interval.
## The stepsByInterval data frame, which was previously created, can be used in this imputation strategy.
## 3. Create a new dataset that is equal to the original dataset
## but with the missing data filled in.
activityDataImputed <- activityData
for(i in 1:nrow(activityDataImputed)){
if(is.na(activityDataImputed$steps[i])){
activityDataImputed$steps[i] <- stepsByInterval[stepsByInterval$interval==activityDataImputed[i,3],2]
}
}
## 4.
## Make a histogram of the total number of steps taken each day and
## calculate and report the mean and median total number of steps taken per day.
##
## Do these values differ from the estimates from the first part of the assignment?
## What is the impact of imputing missing data on the estimates of the total daily number of steps?
## Group the activityDataImputed by date variable
activityByDate_2 <- group_by(activityDataImputed, date)
## Create a dataframe with sum of steps per date
stepsByDate_2<- summarize(activityByDate_2, totalSteps = sum(steps))
## Create the histogram of total number of steps taken each day.
hist(stepsByDate_2$totalSteps)
## Mean of total number of steps taken per day
meanTotalSteps_2 <- mean(stepsByDate_2$totalSteps, na.rm=FALSE)
## Median of total number of steps taken per day
medianTotalSteps_2 <- median(stepsByDate_2$totalSteps, na.rm=FALSE)
hist(stepsByDate$totalSteps)
?mutate
test <- mutate(activityDataImputed, week=weekdays(activityDataImputed$date))
?as.date
test <- mutate(activityDataImputed, week=weekdays(as.POSIXct(activityDataImputed$date)))
View(test)
?weekdays
?factor
?in
test2 <- mutate(activityDataImputed,
weekFactor=(if(activityDataImputed$week %in% c(2,3,4,5,6){"weekend"}else{"weekday"})))
test2 <- mutate(activityDataImputed,
weekFactor=(if(activityDataImputed$week %in% c(2,3,4,5,6)){"weekend"}else{"weekday"}))
test2 <- mutate(activityDataImputed,
weekFactor=(if(activityDataImputed$week %in% c(2,3,4,5,6)){return "weekend"}else{return "weekday"}))
?mutate
?group_by
?tapply
activityDataImputed <- mutate(activityDataImputed, week=weekdays(as.POSIXct(activityDataImputed$date)))
test2 <- mutate(activityDataImputed,
weekFactor=(if(activityDataImputed$week %in% c(2,3,4,5,6)){"weekend"}else{"weekday"}))
View(test2)
tail(test2)
test2[test2$week==Saturday]
test2[test2$week=="Saturday"]
is.factor(test2$weekFactor)
as.factor(test2$weekFactor)
as.factor(test2$week)
is.factor(test2$weekFactor)
as.factor(test2$weekFactor)
activityDataImputed <- mutate(activityDataImputed, week=weekdays(as.POSIXct(activityDataImputed$date)))
test2 <- mutate(activityDataImputed,
weekFactor=(if(activityDataImputed$week %in% c("Monday","Tuesday","Wednesday","Thursday", "Friday")){"weekday"}else{"weekend"}))
?%in%
test2 <- mutate(activityDataImputed,
weekFactor=(if(activityDataImputed$week == c("Monday","Tuesday","Wednesday","Thursday", "Friday")){"weekday"}else{"weekend"}))
as.factor(test2$weekFactor)
View(test2)
test2 <- mutate(activityDataImputed,
weekFactor=(if(activityDataImputed$week == c("Monday","Tuesday","Wednesday","Thursday", "Friday")){"weekend"}else{"weekday"}))
View(test2)
subset(test2, week=="Saturday")
activityDataImputed <- mutate(activityDataImputed, week=weekdays(as.POSIXct(activityDataImputed$date)))
test2 <- mutate(activityDataImputed, weekFactor=week)
for(i in 1:nrow(test2)){
if(test2[i,4] %in c("Monday","Tuesday","Wednesday","Thursday", "Friday")){
test2[i,5] <- "weekday"
}else{
test2[i,5] <- "weekend"
}
}
activityDataImputed <- mutate(activityDataImputed, week=weekdays(as.POSIXct(activityDataImputed$date)))
test2 <- mutate(activityDataImputed, weekFactor=week)
for(i in 1:nrow(test2)){
if(test2[i,4] %in% c("Monday","Tuesday","Wednesday","Thursday", "Friday")){
test2[i,5] <- "weekday"
}else{
test2[i,5] <- "weekend"
}
}
weekFactor=(if(activityDataImputed$week == c("Monday","Tuesday","Wednesday","Thursday", "Friday")){"weekend"}else{"weekday"}))
View(test2)
subset(test2, week=="Saturday")
subset(test2, week=="Sunday")
test2$weekFactor <- as.factor()
as.factor(test2$weekFactor)
class(test2$weekFactor)
?factor
test2$weekFactor<- as.factor(test2$weekFactor)
?plot
?plot
par(mfrow=c(1,2))  # make 2 plots fit
plot(x=stepsByInterval_2$interval, y=stepsByInterval_2$meanSteps, data=subset(activityDataImputed, weekFactor=="weekday"), type="l")
plot(x=stepsByInterval_2$interval, y=stepsByInterval_2$meanSteps, data=subset(activityDataImputed, weekFactor=="weekend"), type="l")
activityByInterval_2 <- group_by(activityDataImputed, interval)
## Create a dataframe with sum of steps per date
stepsByInterval_2 <- summarize(activityByInterval_2, meanSteps = mean(steps, na.rm=FALSE))
# Create the plot
par(mfrow=c(1,2))  # make 2 plots fit
plot(x=stepsByInterval_2$interval, y=stepsByInterval_2$meanSteps, data=subset(activityDataImputed, weekFactor=="weekday"), type="l")
plot(x=stepsByInterval_2$interval, y=stepsByInterval_2$meanSteps, data=subset(activityDataImputed, weekFactor=="weekend"), type="l")
View(activityByInterval_2)
for(i in 1:nrow(activityDataImputed)){
if(activityDataImputed[i,4] %in% c("Monday","Tuesday","Wednesday","Thursday", "Friday")){
activityDataImputed[i,5] <- "weekday"
}else{
activityDataImputed[i,5] <- "weekend"
}
}
activityDataImputed$weekFactor<- as.factor(activityDataImputed$weekFactor)
## 2. Make a panel plot containing a time series plot (i.e. type = "l")
## of the 5-minute interval (x-axis) and the average number of steps taken,
## averaged across all weekday days or weekend days (y-axis).
## The plot should look something like the following, which was creating using simulated data:
## Group the activityData by interval variable
activityByInterval_2 <- group_by(activityDataImputed, interval)
## Create a dataframe with sum of steps per date
stepsByInterval_2 <- summarize(activityByInterval_2, meanSteps = mean(steps, na.rm=FALSE))
# Create the plot
par(mfrow=c(1,2))  # make 2 plots fit
plot(x=stepsByInterval_2$interval, y=stepsByInterval_2$meanSteps, data=subset(activityDataImputed, weekFactor=="weekday"), type="l")
plot(x=stepsByInterval_2$interval, y=stepsByInterval_2$meanSteps, data=subset(activityDataImputed, weekFactor=="weekend"), type="l")
View(stepsByInterval_2)
View(activityByInterval_2)
stepsByInterval_2 <- summarize(activityByInterval_2, meanSteps = mean(steps, na.rm=FALSE), weekFactor=V5)
View(activityByInterval_2)
View(activityDataImputed)
activityDataImputed <- mutate(activityDataImputed, weekFactor=week)
for(i in 1:nrow(activityDataImputed)){
if(activityDataImputed[i,4] %in% c("Monday","Tuesday","Wednesday","Thursday", "Friday")){
activityDataImputed[i,5] <- "weekday"
}else{
activityDataImputed[i,5] <- "weekend"
}
}
activityDataImputed$weekFactor<- as.factor(activityDataImputed$weekFactor)
View(activityDataImputed)
